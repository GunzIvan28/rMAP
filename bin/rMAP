#! /bin/bash
# set -eu
# sed -i 's/\r//' rMAP - strips out any trailing spaces that can't be interpreted by bash/unix(https://stackoverflow.com/questions/6473766/syntax-error-near-unexpected-token-in-r)
#Resolve parent-directory till it's nolonger a symbolic link
rMAP=$0
cd
while [ -h "$rMAP" ]; do
    rMAPDIR="$(cd -P "$(dirname "$0")" && pwd)"
    rMAP="$(readlink "$rMAP")"
    [[ $rMAP != /* ]] && rMAP="rMAPDIR/$rMAP"
done
rMAPDIR="$(cd -P "$(dirname "$rMAP")" && pwd)"
#Defining Color codes
Off="\033[0m"       # Text Reset
Red="\033[1;31m"    # Red
Yellow="\033[1;33m" # Yellow
Blue="\033[1;34m"   # Blue
Grey="\033[1;30m"   # Dark_Grey
Green="\033[1;32m"  # Green
Purple="\033[1;35m" # Purple
Cyan="\033[1;36m"   # Cyan
White="\033[1;37m"  # White
#Variables
TAB="$(printf '\t')"
OUTPUT=
ADAPTERS="$rMAPDIR/../config-files/adapters.fa"
ASSEMBLY="megahit"
CPUS=4
MINLEN=80
INPUT=
OUTPUT=
CONFIG=0
QUALITY=27
REFERENCE=
VARCALL=0
AMR=0
PHY=0
MGE=0
PANGENOME=0
LIS="~/list.txt"
DOWNLOAD=0
MGE=0
TITLE=
QC=0
TRIM=0
VERSION="1.0"
rMAP=$0
ARGPARSED0=$0
ALLARGSPARSED=$@
logo() {
    echo -e ${Red}
    cat <<'EOF'
  _ \             _)      |    \  | _)                |    _)         |     \                 |            _)        _ \ _)             | _)             
    /   _` |  _ \  |   _` |   |\/ |  |   _|   _| _ \   _ \  |   _` |  |    _ \     \    _` |  |  |  | (_-<  | (_-<   __/  |  _ \   -_)  |  |    \    -_) 
 _|_\ \__,_| .__/ _| \__,_|  _|  _| _| \__| _| \___/ _.__/ _| \__,_| _|  _/  _\ _| _| \__,_| _| \_, | ___/ _| ___/  _|   _| .__/ \___| _| _| _| _| \___| 
            _|                                                                                  ___/                       _|                            
                                                                                                                                                  v.1.0

                                                                                                         __   _,--="=--,_   __
                                                                                                        /  \."    .-.    "./  \
                                                                                                       /  ,/  _   : :   _  \/` \
                                                                                                       \  `| /o\  :_:  /o\ |\__/
                                                                                                        `-'| :="~` _ `~"=: |
                                                                                                           \`     (_)     `/
                                                                                                    .-"-.   \      |      /   .-"-.
                                                                                            .------{     }--|  /,.-'-.,\  |--{     }-----.
                                                                                             )     (_)_)_)  \_/`~-===-~`\_/  (_(_(_)    (
                                                                                             (     RAPID MICROBIAL ANALYSIS PIPELINE    )
                                                                                             )                                          (

EOF
    echo -e ${Off}
}

usage() {
    echo -e ${Cyan}
    cat <<EOF
This is rMAP $VERSION
Developed and maintained by Ivan Sserwadda & Gerald Mboowa

SYPNOSIS:
    Bacterial analysis toolbox for profiling the resistome of ESKAPE pathogens using WGS paired-end reads

USAGE: 
    rMAP [options] --input <DIR> --output <OUTDIR> --reference <REF> 

GENERAL:
    -h/--help       Show this help menu
    -v/--version    Print version and exit
    -x/--citation   Show citation and exit

OBLIGATORY OPTIONS:
    -i/--input      Location of the raw sequences to be analyzed by the pipeline [either .fastq or .fastq.gz]

    -o/--output     Path and name of the output directory

    -r/--reference  Path to reference genome(.gbk). Provide '.gbk' to get annotated vcf files and insertion 
                    sequences  [default="REF.gbk"]  

    -c/--config     Install and configure full software dependencies  

OTHER OPTIONS:
    -d/--download   Download sequences from NCBI-SRA. Requires 'list.txt' of  sample ids saved at $HOME 
                    directory

    -f/--quality    Generate .html reports with quality statistics for the samples

    -q/--trim       Trims adapters off raw reads to a phred quality score[default=$QUALITY]

    -a/--assembly   Perform De novo assembly [default=$ASSEMBLY] Choose either 'shovill' or 'megahit'

    -vc/--varcall   Generates SNPs for each sample and a merged 'all-sample ID' VCF file to be used to infer 
                    phylogeny in downstream analysis

    -t/--threads    Number of threads to use <integer> [default=$CPUS]

    -m/--amr        Profiles any existing antimicrobial resistance genes, virulence factors, mlsts and plasmids 
                    present within each sample id. 

    -p/--phylogeny  Infers phylogeny using merged all-sample ID VCF file to determine diversity and evolutionary 
                    relationships using Maximum Likelihood(ML) in 1000 Bootstraps
    
    -s/--pangenome  Perform pangenome analysis. A minimum of 3 samples should be provided to run this option
    
    -g/--gen-ele    Interrogates and profiles for mobile genomic elements(MGE) and insertion sequeces(IS) that 
                    may exist in the sequences
                     
For further explanation please visit: https://github.com/GunzIvan28/rMAP
EOF
    echo -e ${Off}
}

if [ $# == 0 ]; then
    logo
    usage
    exit 1
fi

################ OPTIONS #########################
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    ARGS="$1"
    case $ARGS in
    -i | --input)
        if [ "$2" ]; then
            INPUT=$2
            shift 2
        fi
        ;;
    -o | --output)
        if [ "$2" ]; then
            OUTPUT=$2
            shift 2
        fi
        ;;

    -d | --download)
        DOWNLOAD=1
        shift
        ;;
    -a | --assembly)
        if [[ "$2" ]]; then
            if [ $2 == 'shovill' ] || [ $2 == 'megahit' ]; then
                ASSEMBLY=$2
                shift 2
            fi
        fi
        ;;
    -f | --quality)
        QC=1
        shift
        ;;

    -q | --trim)
        TRIM=1
        shift
        ;;

    -r | --reference)
        if [ "$2" ]; then
            VARCALL=1
            REFERENCE=$2
            shift 2
        fi
        ;;

    -vc | --varcall)
        VARCALL=1
        shift
        ;;

    -s | --pangenome)
        PANGENOME=1
        shift
        ;;

    -m | --amr)
        AMR=1
        shift
        ;;

    -p | --phylogeny)
        PHY=1
        shift
        ;;
    -g | --gen-ele)
        MGE=1
        shift
        ;;
    -c | --config)
        CONFIG=1
        shift
        ;;
    -t | --threads)
        if [ "$2" -eq "$2" ] 2>/dev/null; then
            CPUS=$2
            shift 2
        else
            echo -e '\nERROR: "-t/--threads" requires a numeric argument\n'
            echo -e "Selected cores: $2\n"
            exit 1
        fi
        ;;

    -h | --help)
        logo
        usage
        exit 1
        ;;
    -v | --version)
        echo "This is rMAP version $VERSION"
        exit 1
        ;;
    -x | --citation)
        echo -e "\nIf using rMAP, please cite:"
        echo -e "Sserwadda, I, Mboowa, G.(2020). rMAP: Rapid Microbial Analysis and Profiling pipeline for Whole-genome sequencing (WGS) High-throughput sequencing (HTS) data."
        exit 1
        ;;

    *)
        echo -e "\nERROR: unknown option: $1 \n"
        usage
        exit 1
        ;;
    esac

done
set -- "${POSITIONAL[@]}" #restore positional parameters
#####------------------------------------------------------------EOF MENU-------------------------------------------------####
cd
############### --------------  EXTRA-PACKAGES INSTALLATION     --------------------------------#########################

if [ $CONFIG -ne "0" ]; then
    CONFIG=1
    start=$SECONDS
    echo -e $Green"rMAP will now configure the system: Please be patient...\n"
    echo -e $Green"rMAP will now install missing R-packages...."$Off
    #### R-package istallations ########
    conda install -y -c conda-forge r-biocmanager
    Rscript -e 'library(BiocManager);BiocManager::install(c("ggtree", "rmarkdown"))'
    Rscript -e 'library(BiocManager);BiocManager::install(c("data.table", "formattable"))'
    echo -e $Green"R-packages installed successfully....\n"$Off
    #### Extra-conda package installations
    conda install -y -c conda-forge beautifulsoup4
    conda install -y -c conda-forge r-gridextra
    conda install -y -c conda-forge r-kableextra
    conda install -y -c conda-forge r-plotly
    conda install -y -c conda-forge r-devtools
    conda install -y -c conda-forge r-reshape2
    conda install -y -c conda-forge r-tidyverse
    echo -e $Green"Extra-conda packages installed successfully....\n"$Off
    echo -e $Green"ALL REQUIRED PACKAGES HAVE BEEN INSTALLED, enjoy rMAP!!....\n"$Off
    echo -e $Red"REMEMBER: '--config' is only run once....\n"$Off
    end=$SECONDS
    echo -e $Green"\nrMAP Set-up Lasted Approximately: $((end - start)) seconds."$Off
    exit
else
    echo -e $Red"Please select '--config' option for full functionality\n"$Off
fi

######-------------------------------- Download SRA Sequences-------------------------------------------------------###
start=$SECONDS
if [ "$DOWNLOAD" -ne "0" ]; then
    DOWNLOAD=1
    if [ -s "$HOME/list.txt" ]; then
        echo -e $Blue"Sample list was found and will be used to download sequences from SRA"$Off
        mkdir -p $HOME/SRA_READS
        for sample in $(cat $HOME/list.txt); do
            echo -e $Blue"Downloading Sample: $sample$Off using $Green$(fastq-dump --version)"$Off
            fastq-dump --split-files --gzip $sample -O $HOME/SRA_READS
        done
        end=$SECONDS
        echo -e $Green"Your NCBI-SRA download lasted Approximately: $((end - start)) seconds and your sequences were saved at $HOME/SRA_READS!!!"$Off
        exit
    else
        echo -e $Red"ID-list was not found!! Create a 'list.txt' with sample IDs and save it at $HOME"$Off
        exit 1
    fi
fi

############# ------------------ CREATING WORKING DIRECTORIES ----------------------------------##########################
mkdir -p -m 777 $OUTPUT/{annotation,variant_calling,quality_reports,assembly,mlsts,resistance_genes,virulence_factors,phylogeny,reports,trimmed_reads}
echo -e "rMAP pipeline intialized.." >$OUTPUT/rMAP.log
date +"%Y-%m-%d %H:%M" >>$OUTPUT/rMAP.log
echo "" >>$OUTPUT/rMAP.log

echo -e $Green
cat <<EOF >>$OUTPUT/rMAP.log

You are now running rMAP version $VERSION
Pipeline parameters selected by user:
$ARGPARSED0 $ALLARGSPARSED
Selected options:
	- Input directory: $INPUT
	- Output directory: $OUTPUT
	- Number of threads to use: $CPUS
EOF
echo -e $Off

echo -e "Input reads directory: $INPUT"
echo -e "Selected output directory: $OUTPUT"
echo -e "Number of cores selected: $CPUS"
########------ Extracting list of downloaded samples to be used for downstream analysis--------------- ###
if $(ls $INPUT/*fastq 2>/dev/null); then
    echo -e $Red"Some reads are not gzipped... rMAP will zip them to optimize the pipeline"$Off
    parallel -j $CPUS --gnu gzip ::: $INPUT/*fastq
else
    echo -e $Green"All reads are zipped, rMAP sequences initialized!!!"$Off
fi
ls $INPUT >$OUTPUT/temp.txt
cat $OUTPUT/temp.txt | cut -d_ -f1 | uniq >$OUTPUT/list.txt
rm -rf $OUTPUT/temp.txt

############################# QUALITY CONTROL #####################################

#####------------------Fastqc for the input reads ----------------------------------------------------###
start=$SECONDS
if [ "$QC" -ne "0" ]; then
    QC=1
    mkdir -p $OUTPUT/quality_reports
    echo -e $Blue"QC of the samples will start:\n"$Off
    echo -e $Blue"Now running: $(fastqc --version)"$Off
    for sample in $(cat $OUTPUT/list.txt); do
        R1=${sample}_1.fastq.gz
        R2=${sample}_2.fastq.gz
        echo -e $Red"\nProcessing sample: "$sample$Off
        fastqc $INPUT/$R1 $INPUT/$R2 --outdir $OUTPUT/quality_reports
    done
    cd $OUTPUT/quality_reports
    echo -e $Blue"\nNow running: $(multiqc --version)"
    multiqc . --force --outdir .
    rm -rf *.zip
    end=$SECONDS
    echo -e $Green"\nYour QC Run Took Approximately: $((end - start)) seconds."$Off
else
    echo -e $Red"'-f/--quality' option disabled: rMAP will skip generation of quality reports"$Off

fi
cd
################################ QUALITY TRIMMING ####################################

CPUS=8
if [ -e "$ADAPTERS" ]; then
    if [ "$TRIM" -ne "0" ]; then
        TRIM=1
        start=$SECONDS
        echo -e $Blue"$ADAPTERS present\n"$Off
        echo -e $Blue"\nrMAP is now Trimming the reads for quality:$QUALITY, minimum length:$MINLEN\n"$Off
        mkdir -p $OUTPUT/trimmed_reads
        for sample in $(cat $OUTPUT/list.txt); do
            A=${sample}_1.fastq.gz
            B=${sample}_2.fastq.gz
            echo -e $Red"\nProcessing sample: "$sample$Off
            trimmomatic PE -threads $CPUS -phred33 $INPUT/$A $INPUT/$B $OUTPUT/trimmed_reads/$sample.clean_1.fastq.gz /dev/null $OUTPUT/trimmed_reads/$sample.clean_2.fastq.gz /dev/null ILLUMINACLIP:$ADAPTERS:1:30:11 LEADING:${QUALITY} TRAILING:${QUALITY} MINLEN:${MINLEN}
        done
        end=$SECONDS
        echo -e $Green"\nYour Trimming Run Took Approximately: $((end - start)) seconds."$Off
    else
        echo -e $Red"'-q/--trim' option disabled: rMAP cannot skip trimming process... This is required for downstream analysis!! Please select '-q' or '--trim'...rMAP will now exit..."$Off
        exit 1
    fi
fi
################-------------Quality filtering stats---------------------###############
export LC_ALL=C
start=$SECONDS
echo -e $Blue"\nrMAP is now Generating Trimming Stats..."$Off
for x in $(cat $OUTPUT/list.txt); do
    echo -e $Blue"Processing sample: $x"$Off
    cat $OUTPUT/trimmed_reads/$x\.clean_*.fastq.gz | awk -b 'BEGIN { t=0.0;sq=0.0; n=0;} ;NR%4==2 {n++;L=length($0);t+=L;sq+=L*L;}END{m=t/n;printf("total\tavg\n%d\t%f\n",n,m,sq/n-m*m);}' >$OUTPUT/trimmed_reads/$x\.ok.stats.txt
    sed -i 's/\..*//' $OUTPUT/trimmed_reads/$x\.ok.stats.txt
    #######cp -rf $OUTPUT/trimmed_reads/*.txt $OUTPUT/reports
done
end=$SECONDS
echo -e $Green"Your Quality Stats Run Took Approximately: $((end - start)) seconds."$Off

######################### ----------------------- GENOME ASSEMBLY  ------------------------------- #############################################

############################## SHOVILL ASSEMBLER  #####################################
start=$SECONDS
echo -e $Blue"\nrMAP is will now perform De-novo Genome Assembly using $ASSEMBLY..."$Off
if [ "$ASSEMBLY" == "shovill" ]; then

    for sample in $(cat $OUTPUT/list.txt); do

        A=${sample}.clean_1.fastq.gz
        B=${sample}.clean_2.fastq.gz

        echo -e $Blue"Processing sample: $sample"$Off
        shovill --R1 $OUTPUT/trimmed_reads/$A --R2 $OUTPUT/trimmed_reads/$B --cpus $CPUS --gsize 3.4M --assembler skesa --ram 8 --force --outdir $OUTPUT/assembly/${sample}
        mv $OUTPUT/assembly/${sample}/contigs.fa $OUTPUT/assembly/${sample}/${sample}.fa
        assembly-stats -t $OUTPUT/assembly/${sample}/${sample}.fa >$OUTPUT/assembly/${sample}/${sample}-assembly-stats.tab
        assembly-stats -t $OUTPUT/assembly/${sample}/${sample}.fa >$OUTPUT/assembly/${sample}/${sample}-assembly-stats.txt
        ##########cp -rf $OUTPUT/assembly/${sample}/*.tab $OUTPUT/assembly/${sample}/*.txt $OUTPUT/reports
    done

else
    for sample in $(cat $OUTPUT/list.txt); do

        A=${sample}.clean_1.fastq.gz
        B=${sample}.clean_2.fastq.gz
        echo -e $Blue"Processing sample: $sample"$Off
        megahit -1 $OUTPUT/trimmed_reads/$A -2 $OUTPUT/trimmed_reads/$B -o $OUTPUT/assembly/${sample} -t $CPUS
        mv $OUTPUT/assembly/${sample}/*.fa $OUTPUT/assembly/${sample}/${sample}.fa
        assembly-stats -t $OUTPUT/assembly/${sample}/${sample}.fa >$OUTPUT/assembly/${sample}/${sample}-assembly-stats.tab
        assembly-stats -t $OUTPUT/assembly/${sample}/${sample}.fa >$OUTPUT/assembly/${sample}/${sample}-assembly-stats.txt
        ###########cp -rf $OUTPUT/assembly/${sample}/*.tab $OUTPUT/assembly/${sample}/*.txt $OUTPUT/reports
    done
fi

end=$SECONDS
echo -e $Green"Your Assembly Run Took Approximately: $((end - start)) seconds."$Off

##################### ANNOTATION ##################################
start=$SECONDS
echo -e $Blue"\nrMAP is will now Annotate the Assembled Genomes..."$Off
prokka --setupdb
for sample in $(cat $OUTPUT/list.txt); do
    echo -e $Blue"Processing sample: $sample"$Off
    mkdir -p $OUTPUT/annotation/$sample
    prokka --outdir $OUTPUT/annotation/$sample --prefix $sample --cpus $CPUS $OUTPUT/assembly/${sample}/${sample}.fa --locustag $sample --force
done | tee -a $OUTPUT/rMAP.log
end=$SECONDS
echo -e $Green"Your Genome Annotation Run Took Approximately: $((end - start)) seconds."$Off

######    Indexing references  #####################
######### In absence of valid .gbk, biopython.convert doesn't execute interractive run and empty gff3 is created
cd
start=$SECONDS
mkdir -p $OUTPUT/references
TEMP="$OUTPUT/references"
REF="$TEMP/*.fa"
IND="$TEMP/*.fai"
tmp="$OUTPUT/temp"
mkdir -p $OUTPUT/temp
cp -rf $REFERENCE $TEMP

if [ "$VARCALL" -ne "0" ]; then
    VARCALL=1
    if [[ $REFERENCE =~ \.gbk$ ]]; then
        echo -e $Blue"\nrMAP is will now perform Variant Calling..."$Off | tee -a $OUTPUT/rMAP.log
        echo -e $Red".gbk found !!! Annotation Mode Enabled...Preparing Annotation files..."$Off | tee -a $OUTPUT/rMAP.log
        echo "$TEMP/$REFERENCE" | awk -F"." '{print $1}' | cut -d/ -f3 >$TEMP/temp1.txt
        x="$(cat $TEMP/temp1.txt)"
        biopython.convert $TEMP/${REFERENCE} genbank -i $TEMP/$x.fa fasta
        biopython.convert $TEMP/${REFERENCE} genbank -i $TEMP/$x.gff3 gff
        rm -rf $TEMP/${REFERENCE}
        bwa index $TEMP/*.fa
        samtools faidx $TEMP/*.fa
        # ####################### Alignment for .gbk file #############################
        for sample in $(cat $OUTPUT/list.txt); do
            A=${sample}.clean_1.fastq.gz
            B=${sample}.clean_2.fastq.gz
            echo -e $Blue"Processing sample: $sample"$Off
            bwa mem -Y -M -R "@RG\tID:${sample}\tSM:${sample}" -t $CPUS $REF $OUTPUT/trimmed_reads/$A $OUTPUT/trimmed_reads/$B |
                samclip --max 10 --ref $IND | # filter out soft and hard clipped alignments from sam file
                samtools sort -n -l 0 -T $temp/${sample} --threads 8 -m 1000M |
                samtools fixmate -m - - |
                samtools sort -l 0 -T $temp/${sample} --threads 8 -m 1000M |
                samtools markdup -T $temp/${sample} -r -s - - >$OUTPUT/variant_calling/${sample}.mrkdup.bam
            samtools index $OUTPUT/variant_calling/${sample}.mrkdup.bam | tee -a $OUTPUT/rMAP.log
        done | tee -a $OUTPUT/rMAP.log
        end=$SECONDS
        echo -e $Green"Your Alignment Run Took Approximately: $((end - start)) seconds."$Off | tee -a $OUTPUT/rMAP.log
        ###################### Variant calling #####################################
        ############----------------- Individual sample variant calling ---------------############
        start=$SECONDS
        echo -e $Blue"\nrMAP is will now perform Variant Calling ..."$Off
        TEMP="$OUTPUT/references"
        REF="$TEMP/*.fa"
        mkdir -p $OUTPUT/variant_calling/snps
        for sample in $(cat $OUTPUT/list.txt); do
            x=${sample}.mrkdup.bam

            echo -e $Blue"Processing sample: $sample"$Off
            freebayes -p 2 -P 0 -C 10 --min-repeat-entropy 1.5 --strict-vcf -q 13 -m 60 --min-coverage 10 -F 0.05 -f $REF -b $OUTPUT/variant_calling/$x -v $OUTPUT/variant_calling/${sample}.raw.vcf
            bcftools view --include 'FMT/GT="1/1" && QUAL>=100 && FMT/DP>=10 && (FMT/AO)/(FMT/DP)>=0' $OUTPUT/variant_calling/${sample}.raw.vcf | vt normalize -r $REF - | bcftools annotate --remove '^INFO/TYPE,^INFO/DP,^INFO/RO,^INFO/AO,^INFO/AB,^FORMAT/GT,^FORMAT/DP,^FORMAT/RO,^FORMAT/AO,^FORMAT/QR,^FORMAT/QA,^FORMAT/GL' >$OUTPUT/variant_calling/${sample}.filt.vcf

        done | tee -a $OUTPUT/rMAP.log
        end=$SECONDS
        echo -e $Green"Your Variant Call Run Took Approximately: $((end - start)) seconds."$Off

        ########--------------- Multiple sample/all-sample-single-file variant calling -------------------###########
        echo -e $Blue"\nrMAP is will create for you a combined VCF file with all sample-IDs ..."$Off
        start=$SECONDS
        x=""
        TEMP="$OUTPUT/references"
        REF="$TEMP/*.fa"

        for sample in $(cat $OUTPUT/list.txt); do
            x="$x$OUTPUT/variant_calling/${sample}.mrkdup.bam "

            echo -e $Blue"Processing sample: $sample"$Off
            freebayes -p 2 -P 0 -C 10 --min-repeat-entropy 1.5 --strict-vcf -q 13 -m 60 --min-coverage 10 -F 0.05 -f $REF -b $x -v $OUTPUT/variant_calling/combined.raw.vcf

            end=$SECONDS
            echo -e $Green"Your Variant Call Run Took Approximately: $((end - start)) seconds."$Off
        done | tee -a $OUTPUT/rMAP.log
        bcftools view --include 'FMT/GT="1/1" && QUAL>=100 && FMT/DP>=10 && (FMT/AO)/(FMT/DP)>=0' $OUTPUT/variant_calling/combined.raw.vcf | vt normalize -r $REF - | bcftools annotate --remove '^INFO/TYPE,^INFO/DP,^INFO/RO,^INFO/AO,^INFO/AB,^FORMAT/GT,^FORMAT/DP,^FORMAT/RO,^FORMAT/AO,^FORMAT/QR,^FORMAT/QA,^FORMAT/GL' >$OUTPUT/variant_calling/combined.filt.vcf
        ################# ----- Annotations using SnpEff--------- ###########
        #########---------------- Multiple sample annotations -----------------------########
        start=$SECONDS
        echo -e $Blue"\nrMAP is will now perform Annotation of Variants..."$Off | tee -a $OUTPUT/rMAP.log
        chmod 777 $HOME/miniconda3/envs/rMAP-1.0/share/snpeff-4.5covid19-1/snpEff.jar
        chmod 777 $HOME/miniconda3/envs/rMAP-1.0/share/snpeff-4.5covid19-1/*
        SNPEFF="$HOME/miniconda3/envs/rMAP-1.0/share/snpeff-4.5covid19-1"
        TEMP="$OUTPUT/references"
        for sample in $(cat $OUTPUT/list.txt); do
            mkdir -p $OUTPUT/variant_calling/snps/${sample}/references/{genomes,ref}
            x=${sample}.filt.vcf
            y="$(cat $TEMP/temp1.txt)"
            echo -e $Blue"Processing sample: "$sample$Off

            ####------------------- Creating a custom snpEff database to annotate vcfs-----------------#
            cp -f $OUTPUT/variant_calling/$x $OUTPUT/variant_calling/snps/${sample}/references/
            chmod 777 $OUTPUT/variant_calling/snps/${sample}/references/
            cat $SNPEFF/snpEff.config | grep '\<codon.' | grep -v "#" | grep -v '\<hg*' | grep -v '\<GRC*' | grep -v '\<test*' >$OUTPUT/variant_calling/snps/${sample}/references/snpEff.config
            echo -e ref.genome : rMAP-1.0 >>$OUTPUT/variant_calling/snps/${sample}/references/snpEff.config
            echo -e '\t' ref.chromosome : $(grep -v "##" $OUTPUT/variant_calling/$x | grep -v "#" | head -n1 | cut -f1) >>$OUTPUT/variant_calling/snps/${sample}/references/snpEff.config
            echo -e '\t' ref.$(grep -v "##" $OUTPUT/variant_calling/$x | grep -v "#" | head -n1 | cut -f1).codonTable : Bacterial_and_Plant_Plastid >>$OUTPUT/variant_calling/snps/${sample}/references/snpEff.config

            ###---------- Creating annotation folders as required by snpEff, copying .fasta files and .gff3 into genome & genes respectively and renaming to sequence.fa and genes.gff
            cp -f $TEMP/$y.fa $OUTPUT/variant_calling/snps/${sample}/references/genomes &&
                mv $OUTPUT/variant_calling/snps/${sample}/references/genomes/$y.fa $OUTPUT/variant_calling/snps/${sample}/references/genomes/ref.fa
            cp -f $TEMP/$y.gff3 $OUTPUT/variant_calling/snps/${sample}/references/ref &&
                mv $OUTPUT/variant_calling/snps/${sample}/references/ref/$y.gff3 $OUTPUT/variant_calling/snps/${sample}/references/ref/genes.gff
            gzip -c $OUTPUT/variant_calling/snps/${sample}/references/ref/genes.gff >$OUTPUT/variant_calling/snps/${sample}/references/ref/genes.gff.gz

            ################-----------------------------------Building database---------------------------------------###################################
            snpEff build -c $OUTPUT/variant_calling/snps/${sample}/references/snpEff.config -dataDir . -gff3 -v ref
            ################-----------------------------------NOW ANNOTATION------------------------------------------###################################
            java -Xmx8g -jar $SNPEFF/snpEff.jar ann -noLog -noStats -no-downstream -no-upstream -no-utr -v -c $OUTPUT/variant_calling/snps/${sample}/references/snpEff.config -dataDir . ref $OUTPUT/variant_calling/snps/${sample}/references/$x >$OUTPUT/variant_calling/snps/${sample}.annot.vcf
            cp -f $OUTPUT/variant_calling/snps/${sample}.annot.vcf $OUTPUT/variant_calling
            # Converting annotated vcfs to TAB format
            snippy-vcf_to_tab --gff $OUTPUT/variant_calling/snps/${sample}/references/ref/genes.gff --ref $OUTPUT/variant_calling/snps/${sample}/references/genomes/ref.fa --vcf $OUTPUT/variant_calling/${sample}.annot.vcf >$OUTPUT/variant_calling/${sample}.annot.tab

        done | tee -a $OUTPUT/rMAP.log
        end=$SECONDS
        echo -e $Green"Your Variant Annotation Run Took Approximately: $((end - start)) seconds."$Off | tee -a $OUTPUT/rMAP.log
        ######################------------------Multiple/All-sample Annotation--------------------------##############################
        start=$SECONDS
        chmod 777 $HOME/miniconda3/envs/rMAP-1.0/share/snpeff-4.5covid19-1/snpEff.jar
        chmod 777 $HOME/miniconda3/envs/rMAP-1.0/share/snpeff-4.5covid19-1/*
        SNPEFF="$HOME/miniconda3/envs/rMAP-1.0/share/snpeff-4.5covid19-1"
        TEMP="$OUTPUT/references"
        y="$(cat $TEMP/temp1.txt)"
        mkdir -p $OUTPUT/variant_calling/snps/combined-snps/references/{genomes,ref}
        cp -f $OUTPUT/variant_calling/combined.filt.vcf $OUTPUT/variant_calling/snps/combined-snps/references/
        chmod 777 $OUTPUT/variant_calling/snps/combined-snps/references/*

        #####----------------- Creating a custom snpEff database to annotate vcfs
        cat $SNPEFF/snpEff.config | grep '\<codon.' | grep -v "#" | grep -v '\<hg*' | grep -v '\<GRC*' | grep -v '\<test*' >$OUTPUT/variant_calling/snps/combined-snps/references/snpEff.config
        echo -e ref.genome : rMAP-1.0 >>$OUTPUT/variant_calling/snps/combined-snps/references/snpEff.config
        echo -e '\t' ref.chromosome : $(grep -v "##" $OUTPUT/variant_calling/snps/combined-snps/references/combined.filt.vcf | grep -v "#" | head -n1 | cut -f1) >>$OUTPUT/variant_calling/snps/combined-snps/references/snpEff.config

        echo -e '\t' ref.$(grep -v "##" $OUTPUT/variant_calling/snps/combined-snps/references/combined.filt.vcf | grep -v "#" | head -n1 | cut -f1).codonTable : Bacterial_and_Plant_Plastid >>$OUTPUT/variant_calling/snps/combined-snps/references/snpEff.config

        ##-------- Creating annotation folders as required by snpEff, copying .fasta files and .gff3 into genome & genes respectively and renaming to sequence.fa and genes.gff----##
        cp -f $TEMP/$y.fa $OUTPUT/variant_calling/snps/combined-snps/references/genomes &&
            mv $OUTPUT/variant_calling/snps/combined-snps/references/genomes/$y.fa $OUTPUT/variant_calling/snps/combined-snps/references/genomes/ref.fa
        cp -f $TEMP/$y.gff3 $OUTPUT/variant_calling/snps/combined-snps/references/ref &&
            mv $OUTPUT/variant_calling/snps/combined-snps/references/ref/$y.gff3 $OUTPUT/variant_calling/snps/combined-snps/references/ref/genes.gff
        gzip -c $OUTPUT/variant_calling/snps/combined-snps/references/ref/genes.gff >$OUTPUT/variant_calling/snps/combined-snps/references/ref/genes.gff.gz

        ##------------------------------------------------ Building database-------------------------------##
        snpEff build -c $OUTPUT/variant_calling/snps/combined-snps/references/snpEff.config -dataDir . -gff3 -v ref

        ##---------------------------------------------------NOW ANNOTATING--------------------------------##
        java -Xmx8g -jar $SNPEFF/snpEff.jar ann -noLog -noStats -no-downstream -no-upstream -no-utr -v -c $OUTPUT/variant_calling/snps/combined-snps/references/snpEff.config -dataDir . ref $OUTPUT/variant_calling/snps/combined-snps/references/combined.filt.vcf >$OUTPUT/variant_calling/snps/combined.annot.vcf
        cp -f $OUTPUT/variant_calling/snps/combined.annot.vcf $OUTPUT/variant_calling
        ###----------------------------------- Converting annotated vcfs to TAB format---------------------##
        snippy-vcf_to_tab --gff $OUTPUT/variant_calling/snps/combined-snps/references/ref/genes.gff --ref $OUTPUT/variant_calling/snps/combined-snps/references/genomes/ref.fa --vcf $OUTPUT/variant_calling/combined.annot.vcf >$OUTPUT/variant_calling/combined.annot.tab

        echo "Your Run Took Approximately: $((end - start)) seconds."
        echo -e $Green"VCF Annotation Successfuly Completed in: $((end - start)) seconds."$Off

    elif [[ $REFERENCE =~ \.fasta$ ]]; then
        echo $Red".fasta found !!! no annotation"$Off | tee -a $OUTPUT/rMAP.log
        echo "$TEMP/$REFERENCE" | awk -F"." '{print $1}' | cut -d/ -f3 >$TEMP/temp.txt
        x="$(cat $TEMP/temp.txt)"
        mv $TEMP/$REFERENCE $TEMP/$x.fa
        bwa index $TEMP/*.fa
        samtools faidx $TEMP/*.fa
        for sample in $(cat $OUTPUT/list.txt); do
            A=${sample}.clean_1.fastq.gz
            B=${sample}.clean_2.fastq.gz
            echo -e $Blue"Processing sample: "$sample$Off
            bwa mem -Y -M -R "@RG\tID:${sample}\tSM:${sample}" -t $CPUS $REF $OUTPUT/trimmed_reads/$A $OUTPUT/trimmed_reads/$B |
                samclip --max 10 --ref $IND | # filter out soft and hard clipped alignments from sam file
                samtools sort -n -l 0 -T $temp/${sample} --threads 8 -m 1000M |
                samtools fixmate -m - - |
                samtools sort -l 0 -T $temp/${sample} --threads 8 -m 1000M |
                samtools markdup -T $temp/${sample} -r -s - - >$OUTPUT/variant_calling/${sample}.mrkdup.bam
            samtools index $OUTPUT/variant_calling/${sample}.mrkdup.bam
        done | tee -a $OUTPUT/rMAP.log
        end=$SECONDS
        echo -e $Green"Your Alignment Run Took Approximately: $((end - start)) seconds."$Off
        ##################### Variant calling #####################################
        ###########----------------- Individual sample sample variant calling ---------------###########
        start=$SECONDS
        TEMP="$OUTPUT/references"
        REF="$TEMP/*.fa"
        mkdir -p $OUTPUT/variant_calling/snps
        for sample in $(cat $OUTPUT/list.txt); do
            x=${sample}.mrkdup.bam

            echo -e $Blue"Processing sample: "$sample$Off
            freebayes -p 2 -P 0 -C 10 --min-repeat-entropy 1.5 --strict-vcf -q 13 -m 60 --min-coverage 10 -F 0.05 -f $REF -b $OUTPUT/variant_calling/$x -v $OUTPUT/variant_calling/${sample}.raw.vcf
            bcftools view --include 'FMT/GT="1/1" && QUAL>=100 && FMT/DP>=10 && (FMT/AO)/(FMT/DP)>=0' $OUTPUT/variant_calling/${sample}.raw.vcf | vt normalize -r $REF - | bcftools annotate --remove '^INFO/TYPE,^INFO/DP,^INFO/RO,^INFO/AO,^INFO/AB,^FORMAT/GT,^FORMAT/DP,^FORMAT/RO,^FORMAT/AO,^FORMAT/QR,^FORMAT/QA,^FORMAT/GL' >$OUTPUT/variant_calling/${sample}.filt.vcf

        done | tee -a $OUTPUT/rMAP.log
        end=$SECONDS
        echo -e $Green"Your Variant Call Run Took Approximately: $((end - start)) seconds."$Off

        ###########--------------- Multiple sample/all-sample-single-file variant calling -------------------##########
        start=$SECONDS
        x=""
        TEMP="$OUTPUT/references"
        REF="$TEMP/*.fa"
        for sample in $(cat $HOME/$OUTPUT/list.txt); do
            x="$x$OUTPUT/variant_calling/${sample}.mrkdup.bam "

            echo -e $Blue"Processing sample: $sample"$Off
            freebayes -p 2 -P 0 -C 10 --min-repeat-entropy 1.5 --strict-vcf -q 13 -m 60 --min-coverage 10 -F 0.05 -f $REF -b $x -v $OUTPUT/variant_calling/combined.raw.vcf
            end=$SECONDS
            echo -e $Green"Your Variant Call Run Took Approximately: $((end - start)) seconds."$Off
        done | tee -a $OUTPUT/rMAP.log
        bcftools view --include 'FMT/GT="1/1" && QUAL>=100 && FMT/DP>=10 && (FMT/AO)/(FMT/DP)>=0' $OUTPUT/variant_calling/combined.raw.vcf | vt normalize -r $REF - | bcftools annotate --remove '^INFO/TYPE,^INFO/DP,^INFO/RO,^INFO/AO,^INFO/AB,^FORMAT/GT,^FORMAT/DP,^FORMAT/RO,^FORMAT/AO,^FORMAT/QR,^FORMAT/QA,^FORMAT/GL' >$OUTPUT/variant_calling/combined.filt.vcf
    else
        echo ".fa found !!! no annotation"
        bwa index $TEMP/*.fa
        samtools faidx $TEMP/*.fa
        for sample in $(cat $OUTPUT/list.txt); do
            A=${sample}.clean_1.fastq.gz
            B=${sample}.clean_2.fastq.gz
            echo -e $Blue"Processing sample: "$sample$Off

            bwa mem -Y -M -R "@RG\tID:${sample}\tSM:${sample}" -t $CPUS $REF $OUTPUT/trimmed_reads/$A $OUTPUT/trimmed_reads/$B |
                samclip --max 10 --ref $IND | # filter out soft and hard clipped alignments from sam file
                samtools sort -n -l 0 -T $temp/${sample} --threads 8 -m 1000M |
                samtools fixmate -m - - |
                samtools sort -l 0 -T $temp/${sample} --threads 8 -m 1000M |
                samtools markdup -T $temp/${sample} -r -s - - >$OUTPUT/variant_calling/${sample}.mrkdup.bam
            samtools index $OUTPUT/variant_calling/${sample}.mrkdup.bam
        done | tee -a $OUTPUT/rMAP.log
        end=$SECONDS
        echo -e $Green"Your Alignment Run Took Approximately: $((end - start)) seconds."$Off
        ##################### Variant calling #####################################
        #######----------------- Individual sample sample variant calling ---------------############
        start=$SECONDS
        TEMP="$OUTPUT/references"
        REF="$TEMP/*.fa"
        mkdir -p $OUTPUT/variant_calling/snps
        for sample in $(cat $OUTPUT/list.txt); do
            x=${sample}.mrkdup.bam

            echo -e $Blue"Processing sample: "$sample$Off
            freebayes -p 2 -P 0 -C 10 --min-repeat-entropy 1.5 --strict-vcf -q 13 -m 60 --min-coverage 10 -F 0.05 -f $REF -b $OUTPUT/variant_calling/$x -v $OUTPUT/variant_calling/${sample}.raw.vcf
            bcftools view --include 'FMT/GT="1/1" && QUAL>=100 && FMT/DP>=10 && (FMT/AO)/(FMT/DP)>=0' $OUTPUT/variant_calling/${sample}.raw.vcf | vt normalize -r $REF - | bcftools annotate --remove '^INFO/TYPE,^INFO/DP,^INFO/RO,^INFO/AO,^INFO/AB,^FORMAT/GT,^FORMAT/DP,^FORMAT/RO,^FORMAT/AO,^FORMAT/QR,^FORMAT/QA,^FORMAT/GL' >$OUTPUT/variant_calling/${sample}.filt.vcf

        done | tee -a $OUTPUT/rMAP.log
        end=$SECONDS
        echo -e $Green"Your Variant Call Run Took Approximately: $((end - start)) seconds."$Off

        ################--------------- Multiple sample/all-sample-single-file variant calling -------------------#
        start=$SECONDS
        x=""
        TEMP="$OUTPUT/references"
        REF="$TEMP/*.fa"
        for sample in $(cat $HOME/$OUTPUT/list.txt); do
            x="$x$OUTPUT/variant_calling/${sample}.mrkdup.bam "

            echo -e $Blue"Processing sample: "$sample$Off
            freebayes -p 2 -P 0 -C 10 --min-repeat-entropy 1.5 --strict-vcf -q 13 -m 60 --min-coverage 10 -F 0.05 -f $REF -b $x -v $OUTPUT/variant_calling/combined.raw.vcf
            end=$SECONDS
            echo "Your Run Took Approximately: $((end - start)) seconds."
        done | tee -a $OUTPUT/rMAP.log
        bcftools view --include 'FMT/GT="1/1" && QUAL>=100 && FMT/DP>=10 && (FMT/AO)/(FMT/DP)>=0' $OUTPUT/variant_calling/combined.raw.vcf | vt normalize -r $REF - | bcftools annotate --remove '^INFO/TYPE,^INFO/DP,^INFO/RO,^INFO/AO,^INFO/AB,^FORMAT/GT,^FORMAT/DP,^FORMAT/RO,^FORMAT/AO,^FORMAT/QR,^FORMAT/QA,^FORMAT/GL' >$OUTPUT/variant_calling/combined.filt.vcf
    fi
else
    echo -e $Red"No reference was given: rMAP will continue without performing variant calling..."$Off
fi
end=$SECONDS
echo -e $Green"Your Variant Call Run Took Approximately: $((end - start)) seconds."$Off
rm -rf $OUTPUT/variant_calling/*.bam $OUTPUT/variant_calling/*.bai
##########----------------------- PHYLOGENY INFERENCE------------------------ ###########################
start=$SECONDS
if [ "$PHY" -ne "0" ]; then
    PHY=1
    echo -e $Blue"\nrMAP is will now perform Inference of Phylogeny on the Variants..."$Off
    cd
    POSTANAL="$HOME/miniconda3/envs/rMAP-1.0/config-files/"
    mkdir -p $OUTPUT/phylogeny && cp -r $OUTPUT/variant_calling/combined.filt.vcf $OUTPUT/phylogeny

    #########--- Converting the genotypes of the multiple samples to .fa format for alignment -----##########
    python $POSTANAL/vcf2phylip.py -i $OUTPUT/phylogeny/combined.filt.vcf --phylip-disable -f
    mv $OUTPUT/phylogeny/*.fasta $OUTPUT/phylogeny/combined.filt.fasta
    rm -rf $OUTPUT/phylogeny/*.vcf
    ######--------- MULTIPLE SEQUENCE ALIGNMENT USING MAFFT-------------------------

    ######------------Alignment at adjusted gap-score 2.0
    mafft --retree 1 --thread 8 $OUTPUT/phylogeny/combined.filt.fasta >$OUTPUT/phylogeny/combined.filt-algn.fasta
    ######------------Applying BMGE[Block Mapping and Gathering with Entropy] to remove poorlyly aligned regions
    bmge -i $OUTPUT/phylogeny/combined.filt-algn.fasta -t DNA -o $OUTPUT/phylogeny/combined.filt-algn.phy -on $OUTPUT/phylogeny/combined.filt-algn.nex
    #####------------------ Applying inference in 1000 Bootraps #################
    iqtree -s $OUTPUT/phylogeny/combined.filt-algn.phy -T AUTO -m MFP -B 1000
    end=$SECONDS
    echo -e $Blue"Your Phylogeny on the Variants Took Approximately: $((end - start)) seconds...."$Off
else
    echo -e $Red"'--phylogeny' option wasn't selected: rMAP will skip this operation...."$Off
fi
###################------------------------------------AMR DETECTION-------------------------- ####################################
if [ "$AMR" -ne "0" ]; then
    AMR=1
    start=$SECONDS
    echo -e $Blue"\nrMAP is will now perform Antimicrobial Resistance Prediction..."$Off
    echo -e $Red"Running NCBI-amrfinder Plus...\n"$Off
    # amrfinder --update
    cd
    mkdir -p $OUTPUT/resistance_genes/{NCBI,ABRICATE}
    for sample in $(cat $OUTPUT/list.txt); do
        echo -e $Blue"Processing sample: "$sample$Off
        mkdir -p $OUTPUT/resistance_genes/NCBI/${sample}
        amrfinder --nucleotide $OUTPUT/assembly/${sample}/${sample}.fa --plus --output $OUTPUT/resistance_genes/NCBI/${sample}/$sample.tab --threads 8

    done
    end=$SECONDS
    echo -e $Blue"Antimicrobial Resistance profiling using NCBI-amrfinder Plus completed in: $((end - start)) seconds...."$Off

    ########## --------------------         ABRICATE       -------------------------------------------------------------------######
    start=$SECONDS
    echo -e $Red"Running Abricate...\n"$Off
    abricate --setupdb
    abricate --check
    cd

    for sample in $(cat $OUTPUT/list.txt); do
        echo -e $Blue"Processing sample: "$sample$Off
        mkdir -p $OUTPUT/resistance_genes/ABRICATE/${sample}
        for i in resfinder card argannot ncbi megares; do
            abricate $OUTPUT/assembly/${sample}/${sample}.fa --threads 8 --nopath --db $i >$OUTPUT/resistance_genes/ABRICATE/${sample}/${sample}_${i}.tab
            sed -i 's/\.fa//' $OUTPUT/resistance_genes/ABRICATE/${sample}/${sample}_${i}.tab
        done
    done
    end=$SECONDS
    echo -e $Blue"Antimicrobial Resistance profiling using Abricate completed in: $((end - start)) seconds...."$Off
    # ---------------------------------------------------------------------------------------------------------------------------
    ##########------------------------------PLASMIDS & VIRULENCE FACTORS------------------------------------#######
    ##########-------------------------------virulence factors----------------------------------------------#######
    cd
    mkdir -p $OUTPUT/{virulence_factors,plasmids}
    for sample in $(cat $OUTPUT/list.txt); do
        echo -e $Blue"Processing sample: $sample"$Off
        abricate $OUTPUT/assembly/${sample}/${sample}.fa --threads 8 --nopath --db vfdb >$OUTPUT/virulence_factors/$sample.tab
    done
    abricate --summary $OUTPUT/virulence_factors/*.tab >$OUTPUT/virulence_factors/summary-vf.tab

    for sample in $(cat $OUTPUT/list.txt); do
        echo -e $Blue"Processing sample: $sample"$Off
        abricate $OUTPUT/assembly/${sample}/${sample}.fa --threads 8 --nopath --db plasmidfinder >$OUTPUT/plasmids/${sample}.tab
    done
    abricate --summary $OUTPUT/plasmids/*.tab >$OUTPUT/plasmids/summary-plasmids.tab
    #---------------------------------------------------------------------------------------------------------------------------
    end=$SECONDS
    echo -e $Blue"Your AMR, Virulence Factors & Plasmid Run Took Approximately: $((end - start)) seconds."$Off
else
    echo -e $Red"'--amr' option was not selected; rMAP is created by default to profile the Resistome ... Please select this option from the menu"$Off
    exit 1
fi

# ##############-----------------------------  MLSTS  --------------------------------------------------------------------------------   #####
mkdir -p $OUTPUT/mlsts
mkdir -p $OUTPUT/genomes
for w in $(cat $OUTPUT/list.txt); do
    cp -r $OUTPUT/assembly/${w}/${w}.fa $OUTPUT/genomes
done
for w in $(cat $OUTPUT/list.txt); do
    mlst --threads $CPUS $OUTPUT/genomes/${w}.fa --nopath >>$OUTPUT/mlsts/mlst-temp.tab
done
sed -i 's/\.fa//' $OUTPUT/mlsts/mlst-temp.tab
sort $OUTPUT/mlsts/mlst-temp.tab >$OUTPUT/mlsts/mlst.tab
cp -rf $OUTPUT/mlsts/mlst.tab $OUTPUT/reports
rm -rf $OUTPUT/genomes
rm -rf $OUTPUT/mlsts/mlsts.tab

############## ----------------------------  QUAST         -------------------------------------------------------------------------   #####
if [ -d "$OUTPUT/assembly/" ]; then

    start=$SECONDS
    echo -e $Red"rMAP will now run some assembly stats using Quast...\n"$Off | tee -a $OUTPUT/rMAP.log
    mkdir -p $OUTPUT/quast_assembly_stats
    for i in $(cat $OUTPUT/list.txt); do
        echo -e $Blue"Processing sample: $i"$Off
        quast $OUTPUT/assembly/${i}/${i}.fa -o $OUTPUT/quast_assembly_stats/${i}_quast_stats -t $CPUS --min-contig 200 --no-icarus --silent --no-sv
    done
    end=$SECONDS
    echo -e $Blue"Your Assembly stats Run Took Approximately: $((end - start)) seconds."$Off
else
    echo -e $Red"No assembly directory was found.. Quast statistics will be skipped by rMAP!! "$Off
fi
# ########### --------------------------- PANGENOME ANALYSIS ------------------------------------------------------------------------------#######
if [ "$PANGENOME" -ne "0" ]; then
    PANGENOME=1
    cd
    start=$SECONDS
    ROARY2SVG="miniconda3/envs/rMAP-1.0/config-files/roary2svg.pl"
    echo -e $Red"rMAP will now run Pangenome Analysis...\n"$Off
    mkdir -p $OUTPUT/gffs
    for sample in $(cat $OUTPUT/list.txt); do
        echo -e $Blue"Processing sample: $sample"$Off
        cp -rf $OUTPUT/annotation/${sample}/${sample}.gff $OUTPUT/gffs
    done
    roary -e -n -f $OUTPUT/pangenomes -p $CPUS $OUTPUT/gffs/*.gff
    fasttree -nt -gtr $OUTPUT/pangenomes/core_gene_alignment.aln >$OUTPUT/pangenomes/core_gene_alignment.newick
    perl $ROARY2SVG $OUTPUT/pangenomes/gene_presence_absence.csv --colour=Green >$OUTPUT/pangenomes/pangenome.svg
    cairosvg $OUTPUT/pangenomes/pangenome.svg -o $OUTPUT/pangenome.png
    mv $OUTPUT/pangenome.png $OUTPUT/pangenomes
    rm -rf $OUTPUT/gffs
    end=$SECONDS
    echo -e $Blue"Pangenome Analysis Lasted Approximately: $((end - start)) seconds."$Off
fi

# ############ ----------------------------- INSERTION SEQUENCE & MOBILE GENETIC ELEMENT ANALYSIS ----------------------------------####################
cd
if [ "$MGE" -ne "0" ]; then
    MGE=1
    start=$SECONDS
    MGE_PATH="$rMAPDIR/../config-files/"
    echo -e $Red"rMAP will now look for Mobile Genetic Elements and Insertion Sequences...\n"$Off
    mkdir -p $OUTPUT/insertion_sequences
    for sample in $(cat $OUTPUT/list.txt); do
        echo -e $Blue"Processing sample: $sample"$Off
        A=${sample}.clean_1.fastq.gz
        B=${sample}.clean_2.fastq.gz
        mkdir -p $OUTPUT/insertion_sequences/${sample}
        ismap --reads $OUTPUT/trimmed_reads/$A $OUTPUT/trimmed_reads/$B --t $CPUS --queries $MGE_PATH/IS.database.fa --reference $REFERENCE --output_dir $OUTPUT/insertion_sequences/${sample}
    done
    end=$SECONDS
    echo -e $Blue"Insertion Sequence Profiling Lasted Approximately: $((end - start)) seconds."$Off
fi
######### -----------------------------   REPORTING   --------------------------------------------------   #####################
######### Formatting results & making them Markdown compatible #################
####### 1. Assembly report complilation
cd
METADATA="$OUTPUT/list.txt"
TAB="$(printf '\t')"
TITLE="rMAP Comprehensive Analysis Report Summary"
DATE="$(date +"%Y-%m-%d")"
mkdir -p -m 777 $OUTPUT/reports
# #### Creating Assembly report #############
for i in $(cat $METADATA); do
    tail -n +2 $OUTPUT/trimmed_reads/$i\.ok.stats.txt >>$OUTPUT/temp2
    tail -n +2 $OUTPUT/quast_assembly_stats/${i}_quast_stats/transposed_report.tsv | awk -v OFS="$TAB" -F "$TAB" '{print $14,$16,$15,$18,$17}' >>$OUTPUT/temp3
done
paste -d "$TAB" $OUTPUT/list.txt $OUTPUT/temp2 $OUTPUT/temp3 | awk -v OFS="$TAB" -F "$TAB" '{print $0, $9=$2*$3/$5}' | awk -v OFS="$TAB" -F "$TAB" '{gsub(/\..*$/,"X",$9)}1' >$OUTPUT/assembly_report.txt
sed -i "1iSampleID${TAB}TrimReads${TAB}MeanReadLen${TAB}Contigs${TAB}GenomeLength${TAB}LargestContig${TAB}N50${TAB}GC-Content${TAB}Depth" $OUTPUT/assembly_report.txt
cp -rf $OUTPUT/assembly_report.txt $OUTPUT/reports
rm -f $OUTPUT/temp2 $OUTPUT/temp3
##### 2. AMR gene formatting ###############
for sample in $(cat $METADATA); do
    cp -rf $OUTPUT/resistance_genes/ABRICATE/${sample}/*.tab $OUTPUT/reports/
done
## ------------- Extracting only genes with >90% Identity
for i in $(cat $METADATA); do
    for j in resfinder card argannot ncbi megares; do
        awk -v OFS="$TAB" -F "$TAB" '(NR>1) && ($10 > 90)' $OUTPUT/reports/$i\_$j\.tab >$OUTPUT/reports/$i\_$j\_tmp.tab
        awk -v OFS="$TAB" -F "$TAB" '($11 > 90)' $OUTPUT/reports/$i\_$j\_tmp.tab >$OUTPUT/reports/$i\_$j\_min90.tab
        sed -i "1i#FILE${TAB}SEQUENCE${TAB}START${TAB}END${TAB}STRAND${TAB}GENE${TAB}COVERAGE${TAB}COVERAGE_MAP${TAB}GAPS${TAB}%COVERAGE${TAB}%IDENTITY${TAB}DATABASE${TAB}ACCESSION${TAB}PRODUCT${TAB}RESISTANCE" $OUTPUT/reports/$i\_$j\_min90.tab
        rm -f $OUTPUT/reports/$i\_$j\_tmp.tab
    done
done
### ------------ Creating summary stats for each database used
for j in resfinder card argannot ncbi megares; do
    abricate $OUTPUT/reports/*$j\_min90.tab --summary --nopath >$OUTPUT/reports/$j\_summary.tab
    sed -i "s/$j\_min90.tab//" $OUTPUT/reports/$j\_summary.tab
done

for j in resfinder card argannot ncbi megares; do
    for i in $(cat $METADATA); do
        sed -i "s/$i\_/$i/" $OUTPUT/reports/$j\_summary.tab
    done
done
### ---------- Further formatting of summary files
for j in resfinder card argannot ncbi megares; do
    sed -i 's/'\''//g' $OUTPUT/reports/$j\_summary.tab
    sed -i 's/#FILE/FILE/g' $OUTPUT/reports/$j\_summary.tab
    sed -i "s/\t\./\t0/g" $OUTPUT/reports/$j\_summary.tab
    sed -i 's/[0-9]*;[0-9]*/abc/g' $OUTPUT/reports/$j\_summary.tab
    sed -i 's/abc.//g' $OUTPUT/reports/$j\_summary.tab
done
### Resfinder gene per isolate
cut -d "$TAB" -f 5 $OUTPUT/reports/*resfinder_min90.tab | sed "s/GENE//" | sed "/^$/d" | sort -u >$OUTPUT/reports/tmp1.txt
for i in $(<$OUTPUT/reports/tmp1.txt); do
    echo -e "$i\t\c" >>$OUTPUT/reports/tmp2.txt
    cat $OUTPUT/reports/*resfinder_min90.tab | grep -c $i >>$OUTPUT/reports/tmp2.txt
done
cut -d "$TAB" -f 1 $OUTPUT/reports/tmp2.txt | sed "s/_.*//" >$OUTPUT/reports/tmp3.txt
for i in $(<$OUTPUT/reports/tmp3.txt); do
    if ! grep -i "^$i\s" $rMAPDIR/../config-files/amr-genes.txt &>/dev/null; then
        echo "Unknown" >>$OUTPUT/reports/tmp4.txt
    else
        grep -i "^$i\s" $rMAPDIR/../config-files/amr-genes.txt | cut -f 2 >>$OUTPUT/reports/tmp4.txt
    fi
done
paste -d "$TAB" $OUTPUT/reports/tmp2.txt $OUTPUT/reports/tmp4.txt >$OUTPUT/reports/resfinder_gene_per_isolate.txt
sed -i "1iGene${TAB}Count${TAB}Resistance" $OUTPUT/reports/resfinder_gene_per_isolate.txt
rm -rf $OUTPUT/reports/tmp*.txt
rm -rf $OUTPUT/reports/*min90.tab

for i in $(cat $METADATA); do
    for j in resfinder card argannot ncbi megares; do
        sed -i "s/;/, /g" $OUTPUT/reports/$i\_$j.tab
    done
done
##### 3. Plasmid replicon formatting ########
for i in $(cat $METADATA); do
    cp -rf $OUTPUT/plasmids/${i}.tab $OUTPUT/reports/
    mv $OUTPUT/reports/${i}.tab $OUTPUT/reports/${i}_plasmids.tab
    sed -i 's/\.fa//' $OUTPUT/reports/${i}_plasmids.tab
    sed -i 's/#FILE/FILE/g' $OUTPUT/reports/${i}_plasmids.tab
done
##### 4. Virulence factor formatting ######
SED="$HOME/miniconda3/envs/rMAP-1.0/bin/sed"
for i in $(cat $METADATA); do
    cp -rf $OUTPUT/virulence_factors/${i}.tab $OUTPUT/reports/
    sed -i 's/\.fa//' $OUTPUT/reports/${i}.tab
    cut -d$'\t' -f2-6,10-11,13-14 $OUTPUT/reports/${i}.tab >$OUTPUT/reports/${i}_vfdb.tab
    $SED -i '1d' $OUTPUT/reports/${i}_vfdb.tab
    $SED -i "1iContig${TAB}Start${TAB}End${TAB}Strand${TAB}Gene${TAB}Coverage${TAB}Identity${TAB}Accession${TAB}Product" $OUTPUT/reports/${i}_vfdb.tab
done

###### 5. Pangenome analysis formatting #####
if [ -s $OUTPUT/pangenomes/summary_statistics.txt ] && [ -s $OUTPUT/pangenomes/pangenome.png ]; then
    cp -f $OUTPUT/pangenomes/pangenome.png $OUTPUT/reports/
    cp -f $OUTPUT/pangenomes/summary_statistics.txt $OUTPUT/reports/
fi
if [ -s $OUTPUT/pangenomes/accessory_binary_genes.fa.newick ]; then
    cp -f $OUTPUT/pangenomes/accessory_binary_genes.fa.newick $OUTPUT/reports/
fi
if [ -s $OUTPUT/pangenomes/core_gene_alignment.newick ]; then
    cp -f $OUTPUT/pangenomes/core_gene_alignment.newick $OUTPUT/reports/
fi
### Extra formatting
for i in $(cat $METADATA); do
    for j in resfinder card argannot ncbi megares vfdb; do
        sed -i 's/#FILE/FILE/g' $OUTPUT/reports/$i\_$j.tab
        sed -i 's/_length/ length/g' $OUTPUT/reports/$i\_$j.tab
        sed -i 's/_cov/ cov/g' $OUTPUT/reports/$i\_$j.tab
    done
done
cp -rf $OUTPUT/mlsts/mlst.tab $OUTPUT/reports
cp -rf $OUTPUT/phylogeny/combined.filt-algn.phy.treefile $OUTPUT/reports/
mv $OUTPUT/reports/combined.filt-algn.phy.treefile $OUTPUT/reports/combined.filt-algn.phy.newick
#### 5. Vcf file compilation
for x in $(cat $METADATA); do
    cp -rf $OUTPUT/variant_calling/${x}.annot.tab $OUTPUT/reports/
    cat $OUTPUT/reports/${x}.annot.tab | grep "snp" | grep "missense_variant" | grep "resistance" >>$OUTPUT/reports/${x}_amr_snps.tab
    cut -d$'\t' -f2-5,11,13-14 $OUTPUT/reports/${x}_amr_snps.tab >$OUTPUT/reports/${x}_amr_snps
    sed -i "1iGenomePosition${TAB}Type${TAB}ReferenceAllele${TAB}AlternateAllele${TAB}Consequence${TAB}AffectedGene${TAB}Product" $OUTPUT/reports/${x}_amr_snps
done
rm -rf $OUTPUT/reports/*amr_snps.tab && rm -rf $OUTPUT/reports/*.annot.tab

#### 6. Insertion sequence work-up
#Variables
INSR="$OUTPUT/insertion_sequences/is_sequences.txt"
FILES="$OUTPUT/insertion_sequences"
SED="$HOME/miniconda3/envs/rMAP-1.0/bin/sed"
LIST="$OUTPUT/insertion_sequences/list2.txt"

cd
mkdir -p $FILES/temp
cp -r $HOME/miniconda3/envs/rMAP-1.0/config-files/IS.database.fa $FILES
cat $FILES/IS.database.fa | grep ">" | sed -r 's/^.{1}//' | sort -u | uniq >>$FILES/is_sequences.txt
for i in $(cat $METADATA); do
    for j in $(cat $INSR); do
        if $(grep -xq "No hits found" $FILES/$i/$i.clean/$j/*.txt 2>/dev/null); then
            :
        else
            cat $FILES/$i/$i.clean/$j/*.txt >$FILES/$i/$j.txt
            mv $FILES/$i/$j.txt $FILES/$i/$i\_$j.txt
            cp -rf $FILES/$i/$i\_$j.txt $FILES/temp
            cat $FILES/temp/$i\_$j.txt >>$FILES/temp/$i\_inseq1.txt
            cat $FILES/temp/$i\_inseq1.txt | sort | uniq >$FILES/temp/$i\_inseq2.txt
            cut -d$'\t' -f1-6,9-10,13-14 $FILES/temp/$i\_inseq2.txt >$FILES/temp/$i\_inseq.txt
            $SED -i '1d' $FILES/temp/$i\_inseq.txt
            $SED -i "1iRegion${TAB}Orientation${TAB}X-coordinates${TAB}Y-coordinates${TAB}Gap${TAB}CallType${TAB}LeftGene${TAB}LeftGeneDescription${TAB}RightGene${TAB}RightGeneDescription" $FILES/temp/$i\_inseq.txt
            cp -rf $FILES/temp/$i\_inseq.txt $OUTPUT/reports
        fi
    done
done

ls $OUTPUT/reports/*_inseq.txt >$FILES/temp/temp.txt
cat $FILES/temp/temp.txt | cut -d_ -f1 | cut -d/ -f3 | uniq >$FILES/list2.txt
cp -rf $HOME/miniconda3/envs/rMAP-1.0/config-files/logo.png $OUTPUT/reports
###### MARKDOWN SAMPLE RUN ############
cat <<EOF >$OUTPUT/reports/rMAP_report.Rmd
---
title: "$TITLE"
date: "$DATE"
output: html_document
---
\`\`\`{r, echo=FALSE, message=FALSE, warning=FALSE}
setwd("/$HOME/$OUTPUT/reports")
library(ggplot2)
library(ggtree)
library(knitr)
library(plotly)
library(RColorBrewer)
library(reshape2)
library(treeio)
library(ape)
library(data.table)
library(dplyr)
library(formattable)
library(tidyr)

### Set a few color variables to make our table more visually appealing
customGreen = "#21f705"
customRed = "#ff7f7f"
customBlue = "#05f7e3"
customYellow = "#fcf80a"
customPink = "#ffc5d9"
customLightBlue = "#b3f6f2"
customOrange = "#fce48a"
knitr::opts_chunk\$set(dpi=120, fig.align = "center", error = TRUE)
\`\`\`
![](logo.png){width=45%} ![](logo.png){width=45%}

#### This run was generated using rMAP version $VERSION performed on $DATE... Thank you for using this pipeline!!
<br>

### Quick links {.sidebar #index}
* #### [Assembly summary statistics](#assembly)
* #### [SNP-Variant Calling](#snps)
* #### [Phylogenetic inference](#phylogenetics)
* #### [Antimicrobial Resistance Profiling](#amr)
* #### [Plasmid Profiling](#plasmids)
* #### [Virulence Factor Determination](#virulencefactors)
* #### [Multi-Locus Sequence Typing (MLST)](#mlst)
* #### [Pangenome Analysis](#pangenome)
* #### [Insertion sequence characterization (IS)](#insertionsequences)

EOF

cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
## Assembly summary statistics {#assembly}
<br>

| Field | Description |
:----- | :---------------------------------------------------------------- |
**SampleID** | Name of the sample 
**TrimReads** | Total number of reads after quality filtering
**MeanReadLen** | Average read length after quality filtering
**Contigs** | Number of contigs of the draft genome (>200bp)
**GenomeLength** | Length (bp) of the draft genome
**LargestContig** | Length (bp) of the largest contig in the genome
**N50** | Length of the smallest contig in the set that contains the fewest (largest) contigs whose combined length represents at least 50% of the assembly
**GC-Content** | GC content (%) of the draft genome
**Depth** | Number of times each nucleotide position in the draft genome has a read that aligns to that position
<br>
EOF

cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd

\`\`\`{r, echo=FALSE}
options(warn=-1)
seqdata=read.table('assembly_report.txt', header = T, sep = '\t', dec = '.')
colnames(seqdata)=c('SampleID', 'TrimReads', 'MeanReadLen', 'Contigs', 'GenomeLength', 'LargestContig', 'N50', 'GC-Content', 'Depth')
formattable(seqdata,align=c("l","c","c","c","c","c","c","c","r"),list('SampleID' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'TrimReads'= color_tile(customPink, customPink),
                                                                   'MeanReadLen'= color_tile(customPink, customPink),
                                                                   'Contigs'= color_tile(customPink, customPink),
                                                                   'GenomeLength' = color_tile(customPink, customPink),
                                                                   'LargestContig' = color_tile(customPink, customPink),
                                                                   'N50' = color_tile(customPink, customPink),
                                                                   'GC-Content' = color_tile(customPink, customPink),
                                                                   'Depth' = color_tile(customPink, customPink)))

\`\`\`

#### Select the parameter {.tabset .tabset-fade .tabset-pills}
##### Number of reads
\`\`\`{r, echo=FALSE}
options(warn=-1)
options("scipen"=100, "digits"=0)
x=seqdata\$SampleID
y=seqdata\$TrimReads
a <- list(title = "Number of reads", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(339, 100%, 89%)")) %>%
layout(yaxis = a)
\`\`\`
Average number of reads per sample = **\`r mean(seqdata\$TrimReads, na.rm=TRUE)\`**

##### Average read length
\`\`\`{r, echo=FALSE}
x=seqdata\$SampleID
y=seqdata\$MeanReadLen
a <- list(title = "Average read length", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(176, 79%, 83%)")) %>%
layout(yaxis = a)
\`\`\`
Average read length per sample = **\`r mean(seqdata\$MeanReadLen, na.rm=TRUE)\` bp**

##### Number of contigs
\`\`\`{r, echo=FALSE}
x=seqdata\$SampleID
y=seqdata\$Contigs
a <- list(title = "Number of contigs", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(113, 96%, 49%)")) %>%
layout(yaxis = a)
\`\`\`
Average number of contigs per sample = **\`r mean(seqdata\$Contigs)\`**

##### Genome length
\`\`\`{r, echo=FALSE}
x=seqdata\$SampleID
y=seqdata\$GenomeLength
a <- list(title = "Genome length", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(305, 96%, 49%)")) %>%
layout(yaxis = a)
\`\`\`
Average genome length per sample = **\`r mean(seqdata\$GenomeLength)\` bp**

##### Largest contig length
\`\`\`{r, echo=FALSE}
x=seqdata\$SampleID
y=seqdata\$LargestContig
a <- list(title = "Largest contig length", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(47, 95%, 76%)")) %>%
layout(yaxis = a)
\`\`\`
Average largest contig length per sample = **\`r mean(seqdata\$LargestContig)\` bp**

##### N50
\`\`\`{r, echo=FALSE}
x=seqdata\$SampleID
y=seqdata\$N50
a <- list(title = "N50", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(0, 100%, 75%)")) %>%
layout(yaxis = a)
\`\`\`
Average N50 per sample = **\`r mean(seqdata\$N50)\` bp**

##### GC content
\`\`\`{r, echo=FALSE}
options("scipen"=0, "digits"=3)
x=seqdata\$SampleID
y=seqdata\$'GC-Content'
a <- list(title = "GC content (%)", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(175, 96%, 49%)")) %>%
layout(yaxis = a)
\`\`\`
Average GC content per sample = **\`r mean(seqdata\$'GC-Content')\`%**

##### Sequencing depth
\`\`\`{r, echo=FALSE}
seqdata\$Depth=gsub('X','', seqdata\$Depth)
seqdata\$Depth=as.numeric(seqdata\$Depth)
x=seqdata\$SampleID
y=seqdata\$Depth
a <- list(title = "Sequencing depth (X)", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar", marker = list(color = "hsl(69, 96%, 49%)")) %>%
layout(yaxis = a)
\`\`\`
Average sequencing depth = **\`r mean(seqdata\$Depth, na.rm=TRUE)\`X**

##

[Back to index](#index)

EOF

cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
## SNP-variant calling {#snps}
<br>

| Field | Description |
:----- | :---------------------------------------------------------------- |
**GenomePosition** | Position in the genome where SNP is found
**Type** | Nature of the SNP identified (Only 'True' SNPs are shown by default)
**ReferenceAllele** | Allele found in the reference genome
**AlternateAllele** | Allele found in the genome of interest forming the SNP
**Consequence** | Amino acid alterations caused by the SNP
**AffectedGene** | The tartget gene affected by the SNP
**Product** | The outcome from the presence of the SNP

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $(cat $METADATA); do
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
options(warn=-1)
snps=read.table("${i}_amr_snps", header = T, sep = "\t", dec = ".", quote = "")
snps=as.data.frame(snps)
snpsdata=cbind(snps[,1:7])
colnames(snpsdata)=c("GenomePosition", "Type", "ReferenceAllele", "AlternateAllele", "Consequence", "AffectedGene", "Product")
snps = snpsdata[order(snpsdata\$GenomePosition),]
row.names(snps)=NULL
if (nrow(snps)==0){
  print ("NO ANTIBIOTIC-ASSOCIATED SNPS DETECTED!!!")
} else {
formattable(snps,align=c("l","c","c","c","c","c","r"),list('GenomePosition' = formatter("span", style = ~ style(color = "blue",font.weight = "bold")),
'Type'= color_tile(customYellow, customYellow),
'ReferenceAllele'= color_tile(customYellow, customYellow),
'AlternateAllele'= color_tile(customYellow, customYellow),
'Consequence' = color_tile(customYellow, customYellow),
'AffectedGene' = color_tile(customYellow, customYellow),
'Product' = color_tile(customYellow, customYellow)))
}

\`\`\`
EOF
done
cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##
<br>
[Back to index](#index)

EOF

echo "## Phylogenetic inference {#phylogenetics}" >>$OUTPUT/reports/rMAP_report.Rmd
if [ -s $OUTPUT/reports/combined.filt-algn.phy.newick ]; then
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd

#### Phylogenetic inference based on vcf SNPS {.tabset .tabset-fade .tabset-pills}
##### Rectangular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("combined.filt-algn.phy.newick")
treelim=20*mean(tree\$edge.length)
ggtree(tree) + geom_tiplab(size=3, color='black') + xlim_tree(treelim) + geom_nodepoint(color="#0A7EF3", alpha=1/4, size=5)
\`\`\`

##### Circular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("combined.filt-algn.phy.newick")
ggtree(tree, layout="circular") + geom_tiplab2(size=3, color='blue')
\`\`\`

##### Circular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("combined.filt-algn.phy.newick")
ggtree(tree, layout="circular", branch.length="none") + geom_tiplab2(size=3, color='blue') + geom_nodepoint(color="#0A7EF3", alpha=1/4, size=5) + geom_tippoint(color="#F32D0A", shape=8, size=2)
\`\`\`

##

<br>

[Back to index](#index)

EOF

else
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
Phylogeny inference was not performed.

<br>

[Back to index](#index)

EOF
fi

cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
## Antimicrobial Resistance Profiling {#amr}
<br>

| Field | Description |
:----- | :---------------------------------------------------------------- |
**Contig** | Contig name where the gene was found
**Start** | Start position of the gene within the contig
**End** | End position of the gene within the contig
**Gene** | Antibiotic resistance gene
**Gaps** | Gaps in subject (genome) and query (antibiotic resistance gene)
**Coverage** | Proportion (%) of the gene covered
**Identity** | Proportion (%) of exact nucleotide matches
**Accession** | Accesion number of the antibiotic resistance gene
**Product** | Antibiotic resistance gene product
**Resistance** | Antibiotic that the gene confers resistance to

<br>

#### Select the samples and the database {.tabset .tabset-fade .tabset-pills}
EOF
for i in $(cat $METADATA); do
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##### $i {.tabset .tabset-fade .tabset-pills}
###### Resfinder
\`\`\`{r, echo=FALSE}
options(warn=-1)
ABresfinder=read.table("${i}_resfinder.tab", header = T, sep = "\t", dec = ".", quote = "")
ABresfinder=as.data.frame(ABresfinder)
Resfdata=cbind(ABresfinder[,2:4], ABresfinder[,6], ABresfinder[,9:11], ABresfinder[,13:15])
colnames(Resfdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABresfinder = Resfdata[Resfdata\$Identity>90,]
ABresfinder = ABresfinder[ABresfinder\$Coverage>90,]
ABresfinder = ABresfinder[order(ABresfinder\$Gene),]
row.names(ABresfinder)=NULL
if (nrow(ABresfinder)==0){
  print ("No antibiotic resistance genes from Resfinder database were found")
} else {
formattable(ABresfinder,align=c("l","c","c","c","c","c","c","c","c","r"),list('Contig' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'Start'= color_tile(customOrange, customOrange),
                                                                   'End'= color_tile(customOrange, customOrange),
                                                                   'Gene'= color_tile(customOrange, customOrange),
                                                                   'Gaps' = color_tile(customOrange, customOrange),
                                                                   'Coverage' = color_tile(customOrange, customOrange),
                                                                   'Identity' = color_tile(customOrange, customOrange),
                                                                   'Accession' = color_tile(customOrange, customOrange),
                                                                   'Product' = color_tile(customOrange, customOrange),
                                                                   'Resistance' = color_tile(customOrange, customOrange)
                                                                   ))
}
\`\`\`

###### CARD
\`\`\`{r, echo=FALSE}
options(warn=-1)
ABcard=read.table("${i}_card.tab", header = T, sep = "\t", dec = ".", quote = "")
ABcard=as.data.frame(ABcard)
carddata=cbind(ABcard[,2:4], ABcard[,6], ABcard[,9:11], ABcard[,13:15])
colnames(carddata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABcard = carddata[carddata\$Identity>90,]
ABcard = ABcard[ABcard\$Coverage>90,]
ABcard = ABcard[order(ABcard\$Gene),]
row.names(ABcard)=NULL
if (nrow(ABcard)==0){
  print ("No antibiotic resistance genes from CARD database were found")
} else {
formattable(ABcard,align=c("l","c","c","c","c","c","c","c","c","r"),list('Contig' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'Start'= color_tile(customBlue, customBlue),
                                                                   'End'= color_tile(customBlue, customBlue),
                                                                   'Gene'= color_tile(customBlue, customBlue),
                                                                   'Gaps' = color_tile(customBlue, customBlue),
                                                                   'Coverage' = color_tile(customBlue, customBlue),
                                                                   'Identity' = color_tile(customBlue, customBlue),
                                                                   'Accession' = color_tile(customBlue, customBlue),
                                                                   'Product' = color_tile(customBlue, customBlue),
                                                                   'Resistance' = color_tile(customBlue, customBlue)
                                                                   ))
}
\`\`\`

###### ARG-ANNOT
\`\`\`{r, echo=FALSE}
options(warn=-1)
ABargannot=read.table("${i}_argannot.tab", header = T, sep = "\t", dec = ".", quote = "")
ABargannot=as.data.frame(ABargannot)
argannotdata=cbind(ABargannot[,2:4], ABargannot[,6], ABargannot[,9:11], ABargannot[,13:15])
colnames(argannotdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABargannot = argannotdata[argannotdata\$Identity>90,]
ABargannot = ABargannot[ABargannot\$Coverage>90,]
ABargannot = ABargannot[order(ABargannot\$Gene),]
row.names(ABargannot)=NULL
if (nrow(ABargannot)==0){
  print ("No antibiotic resistance genes from ARG-ANNOT database were found")
} else {
formattable(ABargannot,align=c("l","c","c","c","c","c","c","c","c","r"),list('Contig' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'Start'= color_tile(customPink, customPink),
                                                                   'End'= color_tile(customPink, customPink),
                                                                   'Gene'= color_tile(customPink, customPink),
                                                                   'Gaps' = color_tile(customPink, customPink),
                                                                   'Coverage' = color_tile(customPink, customPink),
                                                                   'Identity' = color_tile(customPink, customPink),
                                                                   'Accession' = color_tile(customPink, customPink),
                                                                   'Product' = color_tile(customPink, customPink),
                                                                   'Resistance' = color_tile(customPink, customPink)
                                                                   ))
}
\`\`\`

###### NCBI
\`\`\`{r, echo=FALSE}
options(warn=-1)
ABncbi=read.table("${i}_ncbi.tab", header = T, sep = "\t", dec = ".", quote = "")
ABncbi=as.data.frame(ABncbi)
ncbidata=cbind(ABncbi[,2:4], ABncbi[,6], ABncbi[,9:11], ABncbi[,13:15])
colnames(ncbidata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABncbi = ncbidata[ncbidata\$Identity>90,]
ABncbi = ABncbi[ABncbi\$Coverage>90,]
ABncbi = ABncbi[order(ABncbi\$Gene),]
row.names(ABncbi)=NULL
if (nrow(ABncbi)==0){
  print ("No antibiotic resistance genes from NCBI database were found")
} else {
formattable(ABncbi,align=c("l","c","c","c","c","c","c","c","c","r"),list('Contig' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'Start'= color_tile(customYellow, customYellow),
                                                                   'End'= color_tile(customYellow, customYellow),
                                                                   'Gene'= color_tile(customYellow, customYellow),
                                                                   'Gaps' = color_tile(customYellow, customYellow),
                                                                   'Coverage' = color_tile(customYellow, customYellow),
                                                                   'Identity' = color_tile(customYellow, customYellow),
                                                                   'Accession' = color_tile(customYellow, customYellow),
                                                                   'Product' = color_tile(customYellow, customYellow),
                                                                   'Resistance' = color_tile(customYellow, customYellow)
                                                                   ))
}
\`\`\`

###### MEGARES
\`\`\`{r, echo=FALSE}
options(warn=-1)
ABmegares=read.table("${i}_megares.tab", header = T, sep = "\t", dec = ".", quote = "")
ABmegares=as.data.frame(ABmegares)
megaresdata=cbind(ABmegares[,2:4], ABmegares[,6], ABmegares[,9:11], ABmegares[,13:15])
colnames(megaresdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABmegares = megaresdata[megaresdata\$Identity>90,]
ABmegares = ABmegares[ABmegares\$Coverage>90,]
ABmegares = ABmegares[order(ABmegares\$Gene),]
row.names(ABmegares)=NULL
if (nrow(ABmegares)==0){
  print ("No antibiotic resistance genes from MEGARES database were found")
} else {
formattable(ABncbi,align=c("l","c","c","c","c","c","c","c","c","r"),list('Contig' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'Start'= color_tile(customRed, customRed),
                                                                   'End'= color_tile(customRed, customRed),
                                                                   'Gene'= color_tile(customRed, customRed),
                                                                   'Gaps' = color_tile(customRed, customRed),
                                                                   'Coverage' = color_tile(customRed, customRed),
                                                                   'Identity' = color_tile(customRed, customRed),
                                                                   'Accession' = color_tile(customRed, customRed),
                                                                   'Product' = color_tile(customRed, customRed),
                                                                   'Resistance' = color_tile(customRed, customRed)
                                                                   ))
}
\`\`\`

EOF
done

cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd

##

<br>

#### Summary figures
Presence/Absence of antibiotic resistance genes (coverage and identity > 90%) on each sample

##### Select the database {.tabset .tabset-fade .tabset-pills}
###### Resfinder
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
ResfinderSummary=read.table("resfinder_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
ResfinderSummary=as.data.frame(ResfinderSummary)
ResfinderSummary=ResfinderSummary[,-2]
Resfinderdatos=as.matrix(ResfinderSummary[,-1])
x=colnames(ResfinderSummary)[-1]
y=ResfinderSummary\$FILE
plot_ly(x=x, y=y, z=Resfinderdatos, type = "heatmap", colors=colorRamp(c("gainsboro", "olivedrab", "forestgreen")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

###### CARD
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
CARDSummary=read.table("card_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
CARDSummary=as.data.frame(CARDSummary)
CARDSummary=CARDSummary[,-2]
CARDdatos=as.matrix(CARDSummary[,-1])
x=colnames(CARDSummary)[-1]
y=CARDSummary\$FILE
plot_ly(x=x, y=y, z=CARDdatos, type = "heatmap", colors=colorRamp(c("gainsboro", "firebrick1", "firebrick3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

###### ARG-ANNOT
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
ARGSummary=read.table("argannot_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
ARGSummary=as.data.frame(ARGSummary)
ARGSummary=ARGSummary[,-2]
ARGdatos=as.matrix(ARGSummary[,-1])
x=colnames(ARGSummary)[-1]
y=ARGSummary\$FILE
plot_ly(x=x, y=y, z=ARGdatos, type = "heatmap", colors=colorRamp(c("gainsboro", "dodgerblue1", "dodgerblue3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

###### NCBI
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
NCBISummary=read.table("ncbi_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
NCBISummary=as.data.frame(NCBISummary)
NCBISummary=NCBISummary[,-2]
NCBIdata=as.matrix(NCBISummary[,-1])
x=colnames(NCBISummary)[-1]
y=NCBISummary\$FILE
plot_ly(x=x, y=y, z=NCBIdata, type = "heatmap", colors=colorRamp(c("gainsboro", "maroon", "maroon3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

###### MEGARES
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
MEGARESSummary=read.table("megares_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
MEGARESSummary=as.data.frame(MEGARESSummary)
MEGARESSummary=MEGARESSummary[,-2]
MEGARESdata=as.matrix(MEGARESSummary[,-1])
x=colnames(MEGARESSummary)[-1]
y=MEGARESSummary\$FILE
plot_ly(x=x, y=y, z=MEGARESdata, type = "heatmap", colors=colorRamp(c("gainsboro", "orangered", "orangered3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

##


<br>

[Back to index](#index)

EOF

if [ -d /$HOME/$OUTPUT/reports ]; then
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
## Plasmid Profiling {#plasmids}

<br>

| Field | Description |
:----- | :---------------------------------------------------------------- |
**Contig** | Contig name where the gene was found
**Start** | Start position of the gene within the contig
**End** | End position of the gene within the contig
**Gene** | Antibiotic resistance gene
**Gaps** | Gaps in subject (genome) and query (antibiotic resistance gene)
**Coverage** | Proportion (%) of the gene covered
**Identity** | Proportion (%) of exact nucleotide matches
**Accession** | Accesion number of the antibiotic resistance gene
**Product** | Antibiotic resistance gene product

<br>

#### Select sample {.tabset .tabset-fade .tabset-pills}
EOF
    for i in $(cat $METADATA); do
        cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
options(warn=-1)
plasmids=read.table("${i}_plasmids.tab", header = T, sep = "\t", dec = ".", quote = "")
plasmids=as.data.frame(plasmids)
plasmidsdata=cbind(plasmids[,2:4], plasmids[,6], plasmids[,9:11], plasmids[,13:14])
colnames(plasmidsdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
plasmids = plasmidsdata[plasmidsdata\$Identity>90,]
plasmids = plasmids[plasmids\$Coverage>90,]
plasmids = plasmids[order(plasmids\$Gene),]
row.names(plasmids)=NULL
if (nrow(plasmids)==0){
  print ("NO PLASMID FOUND!!")
} else if (dim(plasmids)[1]==0 ){
    print ("NO PLASMID FOUND!!")
} else {
formattable(plasmids,align=c("l","c","c","c","c","c","c","c","c","r"),list('Contig' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'Start'= color_tile(customPink, customPink),
                                                                   'End'= color_tile(customPink, customPink),
                                                                   'Gene'= color_tile(customPink, customPink),
                                                                   'Gaps' = color_tile(customPink, customPink),
                                                                   'Coverage' = color_tile(customPink, customPink),
                                                                   'Identity' = color_tile(customPink, customPink),
                                                                   'Accession' = color_tile(customPink, customPink),
                                                                   'Product' = color_tile(customPink, customPink)
                                                                   ))
}
\`\`\`

EOF
    done
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##
<br>
[Back to index](#index)

EOF
else
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
    WARNING: '_plasmids.tab' file(s) was/were not found, rMAP could not find the file in the 'reports' directory. This will not be displayed in the html report
    Report this bug using: [Issue Tracker](https://github.com/GunzIvan28/rMAP/issues)

<br>
[Back to index](#index)
EOF
fi

cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
## Virulence Factor Determination {#virulencefactors}

<br>

| Field | Description |
:----- | :---------------------------------------------------------------- |
**Contig** | Contig name where the gene was found
**Start** | Start position of the gene within the contig
**End** | End position of the gene within the contig
**Gene** | Antibiotic resistance gene
**Coverage** | Proportion (%) of the gene covered
**Identity** | Proportion (%) of exact nucleotide matches
**Accession** | Accesion number of the antibiotic resistance gene
**Product** | Antibiotic resistance gene product

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $(cat $METADATA); do
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
options(warn=-1)
vfdb=read.table("${i}_vfdb.tab", header = T, sep = "\t", dec = ".", quote = "")
vfdb=as.data.frame(vfdb)
vfdbdata=cbind(vfdb[,1:9])
colnames(vfdbdata)=c("Contig", "Start", "End", "Strand", "Gene", "Coverage", "Identity", "Accession", "Product")
vfdb = vfdb[order(vfdb\$Gene),]
row.names(vfdb)=NULL
if (nrow(vfdb)==0){
  print ("NO VIRULENCE FACTORS DETECTED!!!")
} else {
formattable(vfdb,align=c("l","c","c","c","c","c","c","c","r"),list('Contig' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'Start'= color_tile(customBlue, customBlue),
                                                                   'End'= color_tile(customBlue, customBlue),
                                                                   'Strand' = color_tile(customBlue, customBlue),
                                                                   'Gene'= color_tile(customBlue, customBlue),
                                                                   'Coverage' = color_tile(customBlue, customBlue),
                                                                   'Identity' = color_tile(customBlue, customBlue),
                                                                   'Accession' = color_tile(customBlue, customBlue),
                                                                   'Product' = color_tile(customBlue, customBlue)
                                                                   ))
}
\`\`\`

EOF
done
cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##
<br>
[Back to index](#index)

EOF

if [ -s /$HOME/$OUTPUT/reports/mlst.tab ]; then
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd

## Multi-Locus Sequence Typing (MLST) {#mlst}
<br>

| Symbol | Meaning |
:------ | :----------------------------------------------------------------------- |
~ | novel full length allele similar to match
? | partial match to known allele
- | allele missing
<br>
EOF
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
\`\`\`{r, echo=FALSE}
mlst=read.table("mlst.tab", header = F, sep = "\t", dec = ".", row.names=1, fill=TRUE)
mlst=as.data.frame(mlst)
mlst=mlst[order(row.names(mlst)),]
colnames(mlst)[1]="Scheme"
colnames(mlst)[2]="ST"
for (i in 3:ncol(mlst)){
	colnames(mlst)[i]=i-2
}
formattable(mlst,align=c("l","c","c","c","c","c","c","c","c","r"),list('Scheme' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
                                                                   'ST'= color_tile(customPink, customPink),
                                                                   '1'= color_tile(customPink, customPink),
                                                                   '2'= color_tile(customPink, customPink),
                                                                   '3' = color_tile(customPink, customPink),
                                                                   '4' = color_tile(customPink, customPink),
                                                                   '5' = color_tile(customPink, customPink),
                                                                   '6' = color_tile(customPink, customPink),
                                                                   '7' = color_tile(customPink, customPink)
                                                                   ))
\`\`\`

[Back to index](#index)

EOF
else
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
    WARNING: 'mlst.tab' was not found, rMAP could not find the file in the 'reports' directory. This will not be displayed in the html report
    Report this bug using: [Issue Tracker](https://github.com/GunzIvan28/rMAP/issues)
EOF
fi

echo "## Pangenome Analysis {#pangenome}" >>$OUTPUT/reports/rMAP_report.Rmd
if [ -s $OUTPUT/reports/summary_statistics.txt ] && [ -s $OUTPUT/reports/pangenome.png ]; then
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
#### Pangenome genes summary
\`\`\`{r, echo=FALSE}
pangstats=read.table("summary_statistics.txt", header = F, sep = "\t", dec = ".")
pangstats=as.data.frame(pangstats)
colnames(pangstats)=c("Genes", "Description", "Number")
kable(pangstats, results='asis', align = "c")
\`\`\`

####
\`\`\`{r, echo=FALSE}
pangstats=read.table("summary_statistics.txt", header = F, sep = "\t", dec = ".")
pangstats=as.data.frame(pangstats)
pangstats=pangstats[,-2]
pangstats=pangstats[-5,]
colnames(pangstats)=c("Genes", "Number")
piepercent=round(100*pangstats\$Number/sum(pangstats\$Number), 1)
pie(pangstats\$Number, labels = piepercent, col = c("red2", "gold", "forestgreen", "dodgerblue4"), init.angle=90, radius=1, main="Percent of pangenome genes", clockwise = T, border = F)
par(new=TRUE)
pie(x=1, init.angle=90, col= "white", labels='', radius=0.7, border=F)
legend("center", c ("Core genes", "Soft core genes", "Shell genes", "Cloud genes"), cex = 1, fill = c("red2", "gold", "forestgreen", "dodgerblue4"))
\`\`\`

#### Schematic representation of genes presence (color) or absence (blank) between samples:
![](pangenome.png)

<br>

EOF
    if [ -s $OUTPUT/reports/accessory_binary_genes.fa.newick ]; then
        cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
#### Pangenome tree based on presence/absence of accessory genes representation {.tabset .tabset-fade .tabset-pills}
##### Rectangular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE, warning=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
treelim=20*mean(tree\$edge.length)
ggtree(tree) + geom_tiplab(size=3, color='red') + xlim_tree(treelim) + geom_nodepoint(color="#0A7EF3", alpha=1/4, size=5)
\`\`\`

##### Circular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, layout="circular") + geom_tiplab2(size=3, color='blue')
\`\`\`

##### Circular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, layout="circular", branch.length="none") + geom_tiplab2(size=3, color='blue') + geom_nodepoint(color="#0A7EF3", alpha=1/4, size=5) + geom_tippoint(color="#F32D0A", shape=8, size=2)
\`\`\`

##

<br>

[Back to index](#index)

EOF
    else
        cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
WARNING: Pangenome tree based on the presence/absence of accessory genes was not generated during pangenome analysis. Please check.

<br>

[Back to index](#index)

EOF
    fi
    if [ -s $OUTPUT/reports/core_gene_alignment.newick ]; then
        cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
#### Pangenome tree based on core genome alignment representation {.tabset .tabset-fade .tabset-pills}
##### Rectangular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
treelim=20*mean(tree\$edge.length)
ggtree(tree) + geom_tiplab(size=3, color='red') + xlim_tree(treelim) + geom_nodepoint(color="#0A7EF3", alpha=1/4, size=5)
\`\`\`

##### Circular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, layout="circular") + geom_tiplab2(size=3, color='blue')
\`\`\`

##### Circular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, layout="circular", branch.length="none") + geom_tiplab2(size=3, color='blue') + geom_nodepoint(color="#0A7EF3", alpha=1/4, size=5) + geom_tippoint(color="#F32D0A", shape=8, size=2)
\`\`\`

##

<br>

[Back to index](#index)

EOF
    else
        cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
WARNING: Core genome alignment tree was not generated during pangenome analysis. Please check.

<br>

[Back to index](#index)

EOF
    fi

else
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
Pangenome analysis was not performed.

<br>

[Back to index](#index)

EOF
fi

cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
## Insertion sequence characterization {#insertionsequences}
<br>

| Field | Description |
:----- | :---------------------------------------------------------------- |
**Region** | Numeric code given to insertion sequence (IS)
**Orientation** | The orientation of IS position: Either forward (F) or reverse (F)
**X-cordinates** | The left coordinate of the position
**Y-coordinates** | The right coordinate of the position
**Gap** | The distance between the x and y coordinates
**CallType** | Describes whether a position hit is novel (not in reference) or known (in the reference)
**LeftGene** | Locus tag ID of the gene closest to the left side of the IS position
**LeftGeneDescription** | Description of the gene feature from the left side of the IS position. By default this is the product position
**RightGene** | Locus tag ID of the gene closest to the right side of the IS position
**RightGeneDescription** | Description of the gene feature from the right side of the IS position. By default this is the product position

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $(cat $LIST); do
    cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
options(warn=-1)
iseq=read.table("${i}_inseq.txt", header = T, sep = "\t", dec = ".", quote = "")
iseq=as.data.frame(iseq)
iseqdata=cbind(iseq[,1:10])
colnames(iseqdata)=c("Region", "Orientation", "X-coordinates", "Y-coordinates", "Gap", "CallType", "LeftGene", "LeftGeneDescription", "RightGene", "RightGeneDescription")
iseq=iseqdata[order(iseqdata\$Region),]
formattable(iseq,align=c("l","c","c","c","c","c","c","c","c","r"), list('Region' = formatter("span", style = ~ style(color = "black",font.weight = "bold")),
'Orientation'= color_tile(customBlue, customBlue),
'X-coordinates'= color_tile(customBlue, customBlue),
'Y-coordinates'= color_tile(customBlue, customBlue),
'Gap'= color_tile(customBlue, customBlue),
'CallType' = color_tile(customBlue, customBlue),
'LeftGene' = color_tile(customBlue, customBlue),
'LeftGeneDescription' = color_tile(customBlue, customBlue),
'RightGene' = color_tile(customBlue, customBlue),
'RightGeneDescription'= color_tile(customBlue, customBlue),
as.numeric(gsub(",","",iseq,fixed=TRUE))
))

\`\`\`
EOF
done
cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd
##
<br>
[Back to index](#index)

EOF
cat <<EOF >>$OUTPUT/reports/rMAP_report.Rmd

![](logo.png){width=45%} ![](logo.png){width=45%} 
<br>
EOF

echo -e "Rscript -e 'library(rmarkdown); rmarkdown::render(\"$OUTPUT/reports/rMAP_report.Rmd\", \"html_document\", encoding=\"UTF-8\")'" >$OUTPUT/reports/render_report.sh
chmod 755 $OUTPUT/reports/render_report.sh
$OUTPUT/reports/render_report.sh
